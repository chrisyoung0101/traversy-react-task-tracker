{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","style","backgroundColor","className","defaultProps","Header","title","onAdd","showAdd","Task","task","onDelete","onToggle","reminder","onDoubleClick","id","cursor","day","Tasks","tasks","map","AddTask","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","checked","currentTarget","App","showAddTask","setShowAddTask","setTasks","Math","floor","random","newTask","console","log","length","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14c88a0d.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Button = ({ color, text, onClick }) => {\n  return (\n    <button\n      onClick={onClick}\n      style={{ backgroundColor: color }}\n      className=\"btn\"\n    >\n      {text}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  color: 'steelblue',\n};\n\nButton.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport Button from './Button';\n\nconst Header = ({ title, onAdd, showAdd }) => {\n  return (\n    <header className=\"header\">\n      {/* <h1 style={{ color: 'red', backgroundColor: 'black' }}>{title}</h1> */}\n      {/* or */}\n      {/* <h1 style={headingStyle}>{title}</h1> */}\n\n      <h1>{title}</h1>\n      {/* toggle the text in the Add / Close green button based on the boolean\n      value of showAdd.  showAdd prop = showAddTask boolean value from App.js */}\n      {/* when showAdd is true (the form is being shown) we want to show Close else we show Add when the form is not showing */}\n      {/* ...and we then do the same thing for color. */}\n      <Button\n        color={showAdd ? 'red' : 'green'}\n        text={showAdd ? 'Close' : 'Add'}\n        onClick={onAdd}\n      />\n    </header>\n  );\n};\n\n//passing in props from App.js as in <Header title=\"Hello\" /> would overwrite this\n//title with \"Hello\"\nHeader.defaultProps = {\n  title: 'Task Tracker',\n};\n\n//Passing in title props other than a string will still render but the console will show a warning\nHeader.propTypes = {\n  title: PropTypes.string,\n  //title: PropTypes.string.isRequired,\n};\n\n//couple ways of adding CSS inline.  This way below or above.\n// const headingStyle = {\n//   color: 'red',\n//   backgroundColor: 'black',\n// };\n\nexport default Header;\n","import { FaTimes } from 'react-icons/fa';\n\n//npm i react-icons\n//will show installed in package.json\n\nconst Task = ({ task, onDelete, onToggle }) => {\n  return (\n    <div\n      className={`task ${task.reminder ? `reminder` : ''}`}\n      onDoubleClick={() => onToggle(task.id)}\n    >\n      <h3>\n        {task.text}{' '}\n        <FaTimes\n          style={{ color: 'red', cursor: 'pointer' }}\n          //call the onDelete function and pass in the id of the task we want to\n          //delete\n          onClick={() => onDelete(task.id)}\n        />\n      </h3>\n      <p>{task.day}</p>\n    </div>\n  );\n};\n\nexport default Task;\n","import Task from './Task';\n\nconst Tasks = ({ tasks, onDelete, onToggle }) => {\n  return (\n    <>\n      {tasks.map((task) => (\n        <Task\n          key={task.id}\n          task={task}\n          onDelete={onDelete}\n          onToggle={onToggle}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default Tasks;\n","import { useState } from 'react';\n\nconst AddTask = ({ onAdd }) => {\n  // each input gets it's own piece of state\n  const [text, setText] = useState('');\n  const [day, setDay] = useState('');\n  const [reminder, setReminder] = useState(false);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    //validate the text aka Task input\n    if (!text) {\n      alert('Please add a task');\n      return;\n    }\n\n    //pass in these pieces of state\n    onAdd({ text, day, reminder });\n\n    //reset the inputs\n    setText('');\n    setDay('');\n    setReminder(false);\n  };\n\n  return (\n    <form className=\"add-form\" onSubmit={onSubmit}>\n      <div className=\"form-control\">\n        <label>Task</label>\n        <input\n          type=\"text\"\n          placeholder=\"Add Task\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n      </div>\n      <div className=\"form-control\">\n        <label>Day & Time</label>\n        <input\n          type=\"text\"\n          placeholder=\"Add Day & Time\"\n          value={day}\n          onChange={(e) => setDay(e.target.value)}\n        />\n      </div>\n      <div className=\"form-control form-control-check\">\n        <label>Set Reminder</label>\n        <input\n          type=\"checkbox\"\n          //   toggle the checkbox with a true or false value\n          checked={reminder}\n          value={reminder}\n          onChange={(e) => setReminder(e.currentTarget.checked)}\n        />\n      </div>\n\n      <input type=\"submit\" value=\"Save Task\" className=\"btn btn-block\" />\n    </form>\n  );\n};\n\nexport default AddTask;\n","import { useState } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n\n//State gets passed down where actions (calling a function like with deleteTask get passed up)\n\n// Main root app component\nfunction App() {\n  //state to hide / show the input forms with the green add button.  We will toggle state using a boolean value\n  const [showAddTask, setShowAddTask] = useState(false);\n\n  //Default task state\n  const [tasks, setTasks] = useState([\n    {\n      id: 1,\n      text: 'Dog Walk',\n      day: 'Feb 5th at 2pm',\n      reminder: true,\n    },\n    {\n      id: 2,\n      text: 'Pizza',\n      day: 'Jan 5th at 12pm',\n      reminder: false,\n    },\n    {\n      id: 3,\n      text: 'Tape Gun',\n      day: 'Oct 10th at 6pm',\n      reminder: true,\n    },\n    {\n      id: 4,\n      text: 'Book Return',\n      day: 'June 16th at 4pm',\n      reminder: false,\n    },\n    {\n      id: 5,\n      text: 'Rainbow',\n      day: 'Aug 11th at 10am',\n      reminder: true,\n    },\n    {\n      id: 6,\n      text: 'Tennis',\n      day: 'Mar 7th at 2pm',\n      reminder: true,\n    },\n  ]);\n\n  // Add the new Task\n  const addTask = (task) => {\n    //add an id (random number) since we are not dealing with a backend that adds an id on it's own\n    const id = Math.floor(Math.random() * 10000) + 1;\n    //Confusion alert : take the task being the task we are creating aka the new task and adding the id to that new task.\n    const newTask = { id, ...task };\n    //set state with the new task\n    setTasks([...tasks, newTask]);\n\n    console.log(id);\n  };\n\n  // Delete Task\n  //Think of it getting passed through props as onDelete\n  //From App.js > to Tasks.js > to Task.js\n  //Since we just want to delete the individual task item, we invoke the delete function from Task.js\n  const deleteTask = (id) => {\n    //For each task, filter where if the task id is NOT equal to the id being passed in (aka the id you clicked on)\n    //We are using the filter array method to leave out the id we want to delete and\n    //only show what we want to keep.\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  //toggle reminder\n  //if task.id on the current iteration is equal to the id that is passed in then we have/show object else we just show the task.  This object is where we want to spread in all the task's properties (I guess this is making them available?) & then change the current value of task.reminder to the opposite of it's value being from true to false or false to true. View this in React devtools to watch the value switch.\n  const toggleReminder = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: !task.reminder } : task\n      )\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      {/* invoking onAdd will set the value of showAddTask to the opposite of whatever the current value is - toggling the form */}\n      {/* second use of showAddTask :  */}\n      <Header\n        onAdd={() => setShowAddTask(!showAddTask)}\n        showAdd={showAddTask}\n      />\n      {/* if showAddTask is true then show the Add task component green button*/}\n      {/* this expression is like a ternary without using an else */}\n      {showAddTask && <AddTask onAdd={addTask} />}\n\n      {/* if tasks exist, show them otherwise show message */}\n      {tasks.length > 0 ? (\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n      ) : (\n        'No tasks to show'\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// render() takes our react App aka App.js component and passes it to the root element \n// in index.html\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}